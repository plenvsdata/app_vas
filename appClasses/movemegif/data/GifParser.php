<?php

namespace movemegif\data;

use movemegif\exception\GifParseException;

/**
 * An incomplete parser, just enough to parse the compressed pixel data of a GIF with a single frame
 * (the one generated by `imagegif`)
 *
 * @author Patrick van Bergen
 */
class GifParser
{
    /**
     * @param string $imageData
     * @return GifData
     */
    public function parseString($imageData)
    {
        $gifData = new GifData();

        $index = 0;
        $index = $this->parseHeader($imageData, $index);
        $index = $this->parseLogicalScreenDescription($imageData, $index, $gifData);
        $index = $this->parseGlobalColorTable($imageData, $index, $gifData);

        while ($index !== null) {
            $index = $this->parseApplicationExtension($imageData, $index, $gifData);
        }

        return $gifData;
    }

    private function parseHeader($imageData, $offset)
    {
        if (substr($imageData, $offset, 6) != 'GIF89a') {
            throw GifParseException::header();
        }

        return $offset + 6;
    }

    private function parseLogicalScreenDescription($imageData, $offset, $gifData)
    {
        $gifData->imageWidth = ord($imageData[$offset + 0]) + 256 * ord($imageData[$offset + 1]);
        $gifData->imageHeight = ord($imageData[$offset + 2]) + 256 * ord($imageData[$offset + 3]);

        $packedField = ord($imageData[$offset + 4]);

        $gifData->usesGlobalColorTable = (bool)($packedField & 0x80);
        $gifData->globalColorTableSize = 1 << (($packedField & 0x07) + 1);

        return $offset + 7;
    }

    private function parseGlobalColorTable($imageData, $offset, GifData $gifData)
    {
        if ($gifData->usesGlobalColorTable) {
            $gifData->globalColorData = substr($imageData, $offset, 3 * $gifData->globalColorTableSize);
            return $offset + 3 * $gifData->globalColorTableSize;
        } else {
            return $offset;
        }
    }

    private function parseApplicationExtension($imageData, $offset, GifData $gifData)
    {
        if (ord($imageData[$offset + 0]) == 0x3B) {
            return null;
        } elseif (ord($imageData[$offset + 0]) == 0x21 && ord($imageData[$offset + 1]) == 0xF9) {
            return $this->parseGraphicsControlExtension($imageData, $offset, $gifData);
        } else {
            throw GifParseException::applicationExtension();
        }
    }

    private function parseGraphicsControlExtension($imageData, $offset, $gifData)
    {
        $offset = $offset + 8;
        $offset = $this->parseImageDescriptor($imageData, $offset, $gifData);
        $offset = $this->parseLocalColorTable($offset, $gifData);
        $offset = $this->parseImageData($imageData, $offset, $gifData);

        return $offset;
    }

    private function parseImageDescriptor($imageData, $offset, $gifData)
    {
        $packedField = ord($imageData[$offset + 9]);

        $gifData->usesLocalColorTable = (bool)($packedField & 0x80);
        $gifData->localColorTableSize = 1 << (($packedField & 0x07) + 1);

        return $offset + 10;
    }

    private function parseLocalColorTable($offset, $gifData)
    {
        if ($gifData->usesLocalColorTable) {
            return $offset + 3 * $gifData->localColorTableSize;
        } else {
            return $offset;
        }
    }

    private function parseImageData($imageData, $offset, GifData $gifData)
    {
        $offset = $offset + 1;

        list($offset, $data) = $this->parseSubBlocks($imageData, $offset);
        $gifData->compressedPixelData = $data;

        return $offset;
    }

    private function parseSubBlocks($imageData, $offset)
    {
        $contents = '';
        $length = ord($imageData[$offset++]);

        while ($length > 0) {

            $block = substr($imageData, $offset, $length);
            $contents .= $block;

            $offset += $length;
            $length = ord($imageData[$offset++]);
        }

        return array($offset, $contents);
    }
}